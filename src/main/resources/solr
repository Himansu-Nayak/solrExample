#!/bin/sh
#
# chkconfig: 345 79 29
# description: Responsible for start & stop of solr
#
### BEGIN INIT INFO
# Provides: solr
# Required-Start: $remote_fs $network
# Required-Stop: $remote_fs $network
# Default-Start: 3 4 5
# Default-Stop: 0 6
# Short-Description: start and stop solr
# Description: solr process.
#		The init.d script is LSB compliant.
### END INIT INFO


# Source functions library.
. /etc/init.d/functions



# Set the path to the Solr instance to manage
RETVAL=0
INSTALL_ROOT="/ericsson/solr/install/solr-4.8.1/enm"
SFS_MOUNT="/ericsson/enm/solr"
export INSTALL_ROOT
SOLRPIDFILE=/var/run/solr.pid
JAVA=$(which java)
MEMORY_MAX=6144
DEFAULT_MEM=2048
SOLRUSER="solruser"
SOLRGROUPID=205
SOLR_SFS_DATA_DIR="/ericsson/enm/solr/data"


_HOSTNAME='/bin/hostname'
THIS_HOST=$($_HOSTNAME)
DATE=$(date +%Y%m%d_%H%M%S)
GC_OPTS="-XX:+UseParallelOldGC -XX:ParallelGCThreads=4 -XX:+AggressiveOpts -XX:+UnlockExperimentalVMOptions -XX:+UseFastAccessorMethods"
GC_LOG_OPTS=" -verbose:gc -XX:+PrintHeapAtGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -Xloggc:$INSTALL_ROOT/logs/solr_gc.log -XX:-UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M"

info()
{
	logger -s -t SOLR -p user.notice "INFORMATION ($prg): $@"
}

error()
{
	logger -s -t SOLR -p user.err "ERROR ($prg): $@"
}

set_pidfile()
{
	#lsof -i :8983|awk '{print $2}'|grep -v PID |tee $SOLRPIDFILE
	ps -ef|grep solru|grep 8079|awk '{print $2}'|tee $SOLRPIDFILE
}

############################################
# Action:
#       Checks if the mount point is available
#       
# Globals:
#		SFS_MOUNT
# Arguments
#       None
# Returns:
#       0 if successful, 1 otherwise
############################################
check_fs_is_mounted()
{
	local -i RC=0
	mountpoint -q ${SFS_MOUNT}  > /dev/null 2>&1
	RC=$?
	if [ $RC -eq 0 ]
	then
		# Also check you can do listing for when have mounts within mounts
		ls ${SFS_MOUNT} > /dev/null 2>&1
		RC=$?
	fi
	return $RC
}
############################################
# Action:
#       Sets solr permissions on the default data directory
#       
#       
# Globals:
#		SOLR_SFS_DATA_DIR
#       SOLRGROUPID
#       SOLRUSER
# Arguments
#       None
# Returns:
#       0 if successful, 1 otherwise
############################################
create_and_set_data_dir_permissions()
{
	local -i RC=1
	
	mkdir -p $SOLR_SFS_DATA_DIR  > /dev/null 2>&1
	RC=$?
	if [ $RC -eq 0 ]
	then
		info "SOLR Data directory exists at : ${SOLR_SFS_DATA_DIR}"
	else
		error "SOLR Data directory ${SOLR_SFS_DATA_DIR} creation failed with return code $RC"
		
	fi
	
	# Setting recursive permssions from the SFS mount point
	chown -R ${SOLRUSER}:$SOLRGROUPID $SFS_MOUNT  > /dev/null 2>&1
	RC=$?
	if [ $RC -eq 0 ]
	then
		# Also check you can do listing for when have mounts within mounts
		ls ${SFS_MOUNT} > /dev/null 2>&1
		RC=$?
	fi
	return $RC
}

############################################
# Action:
#       Make sure the MEMORY_MAX is not greater
#       than the actual memory assigned to the
#       VM. If it is then take default DEFAULT_MEM.
# Globals:
#       DEFAULT_MEM
#       MEMORY_MAX
# Arguments
#       None
# Returns:
#       Max memory to assign to JVM
############################################
calculate_memory_max() {
		avail_mem=$(awk '$1 ~ /^MemTotal:$/ { print int( $2 / 1024) }' /proc/meminfo)
		if [ "$avail_mem" -gt "$MEMORY_MAX" ];then
				echo "$MEMORY_MAX"
		else
				echo "$DEFAULT_MEM"
		fi
}

do_start()
{
    ########Checking whether solr running or not.
    if [ -f $SOLRPIDFILE ]; then
      read ppid < $SOLRPIDFILE
      if [ `ps --pid $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
       info "solr is already running"
       exit 0
      else
       rm -f $SOLRPIDFILE
     fi
    fi
  
	local sfs_check_count=0
	local max_count=12
	
	info "About to start the solr DB service"
	########Checking of the SFS is mounted.
	while [ $sfs_check_count -lt $max_count ]; do
		if check_fs_is_mounted;
		then
			info "SOLR data SFS mount available: ${SFS_MOUNT}"
			break
		fi
		sleep 10
		((sfs_check_count=sfs_check_count + 1))
	done
	
	if [ $sfs_check_count -eq $max_count ];
	then
		error "SOLR data SFS mount not available: ${SFS_MOUNT}"
		exit 1
	fi

	if ! create_and_set_data_dir_permissions;
	then
		error "Failed to set data directory permissions on ${SOLR_SFS_DATA_DIR}"
		exit 1
	else
		info "Successfully set data directory permissions on ${SOLR_SFS_DATA_DIR}"
	fi
	
	mem=$(calculate_memory_max)
	#################Start Solr Process.
	cd $INSTALL_ROOT


	JAVA_OPTS="$JAVA_OPTS -XX:+HeapDumpOnOutOfMemoryError"
	JAVA_OPTS="$JAVA_OPTS -XX:HeapDumpPath=/ericsson/enm/dumps/${THIS_HOST}_${DATE}.hprof"
	JAVA_OPTS="$JAVA_OPTS $GC_OPTS $GC_LOG_OPTS"
	
	cmd="${JAVA} -server -Xmx${mem}m -Xms${mem}m -Dname=solr -Dcom.sun.management.jmxremote $JAVA_OPTS -XX:OnOutOfMemoryError=/ericsson/solr/install/stopsolr.sh -DSTOP.PORT=8079 -DSTOP.KEY=sitecore -jar start.jar &"
	su solruser -c "$cmd" > /dev/null

}

do_stop()
{
 #Send a stop signal to the running Jetty instance.
 cd $INSTALL_ROOT
 cmd="${JAVA} -server -Dname=solr -Dcom.sun.management.jmxremote $JAVA_OPTS -XX:OnOutOfMemoryError=/ericsson/solr/install/stopsolr.sh -DSTOP.PORT=8079 -DSTOP.KEY=sitecore -jar start.jar --stop &"
 su solruser -c "$cmd" > /dev/null
 
 if [ -f $SOLRPIDFILE ]; then
   rm -f "$SOLRPIDFILE"
 fi
}

metadata_solr()
{
 cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="solr">
<version>1.0</version>
 
<longdesc lang="en">
Resource script for solr. It manages solr instance as an HA resource.
</longdesc>
<shortdesc lang="en">Manages a solr instance</shortdesc>
 
</resource-agent>
END
 return 0
}

# Determine what action should be performed on the server
case "${1}" in
start)
  do_start
  set_pidfile
  ;;
stop)
  do_stop
  rm -f $SOLRPIDFILE
  ;;
status)
 if [ -e $SOLRPIDFILE -a ! -s $SOLRPIDFILE ]
 then
 set_pidfile
 fi
 status -p $SOLRPIDFILE
 RETVAL=$?
  ;;
monitor)
 if [ -e $SOLRPIDFILE -a ! -s $SOLRPIDFILE ]
 then
 set_pidfile
 fi
 status -p $SOLRPIDFILE
 RETVAL=$?
  ;;
meta-data)
 metadata_solr
 RETVAL=$?
  ;;
restart)
  do_stop
  do_start
  set_pidfile
  ;;
*)
  echo "Usage:  $0 { start | stop | status | monitor | meta-data| restart }" >&2
 RETVAL=2
  ;;
esac

echo
exit $RETVAL
