<?xml version="1.0" encoding="UTF-8" ?>
<schema name="cm_history" version="1.5">

  <field name="_version_" type="long" indexed="true" stored="true"/>
  <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false"/>
  <uniqueKey>id</uniqueKey>

  <field name="schemaVersion" default="${project.version}" type="string" indexed="false" stored="true" multiValued="false"/>

  <!-- START - CM HISTORY specific attributes -->
  <field name="jobId" type="string" indexed="true" stored="true" multiValued="false"/>
  <field name="user" type="string" indexed="true" stored="true"/>
  <field name="source" type="string" indexed="true" stored="true"/>
  <field name="timeStamp" type="date" indexed="true" stored="true" multiValued="false" docValues="true"/>
  <field name="changeOrder" type="long" indexed="false" stored="true" multiValued="false" docValues="true"/>
  <field name="changeType" type="string" indexed="true" stored="true"/>
  <field name="fdn" type="text_general" indexed="true" stored="true"/>
  <field name="nodeName" type="string" indexed="true" stored="true" docValues="true"/>
  <field name="moClass" type="string" indexed="true" stored="true"/>
  <field name="beforeValues" type="string" indexed="false" stored="true"/>
  <field name="suppliedAttributes" type="string" indexed="false" stored="true"/>

  <dynamicField name="context.boolean.*" type="boolean" indexed="true" stored="true"/>
  <dynamicField name="context.int.*" type="int" indexed="true" stored="true"/>
  <dynamicField name="context.long.*" type="long" indexed="true" stored="true"/>
  <dynamicField name="context.float.*" type="float" indexed="true" stored="true"/>
  <dynamicField name="context.double.*" type="double" indexed="true" stored="true"/>
  <dynamicField name="context.string.*" type="string" indexed="true" stored="true"/>
  <dynamicField name="context.text.*" type="text_general" indexed="true" stored="true"/>
  <dynamicField name="context.date.*" type="date" indexed="true" stored="true"/>

  <dynamicField name="metaInfo.*" type="string" indexed="false" stored="true"/>

  <dynamicField name="*" type="ignored" multiValued="true"/>
  <!-- END - CM HISTORY specific attributes -->

  <!--
  #############################################
    Do Not Remove Type Definitions.
  #############################################
   -->

  <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various
      query parsers when parsing a query string to determine if a clause of the
      query should be marked as required or optional, assuming the clause isn't
      already marked by some operator. The default is OR, which is generally assumed
      so it is not a good idea to change it globally here. The "q.op" request parameter
      takes precedence over this. <solrQueryParser defaultOperator="OR"/> -->

  <!-- The StrField type is not analyzed, but indexed/stored verbatim.
      It supports doc values but in that case the field needs to be single-valued
      and either required or have a default value. -->
  <fieldType name="string" class="solr.StrField"
             sortMissingLast="true"/>
  <!-- boolean type: "true" or "false" -->
  <fieldType name="boolean" class="solr.BoolField"
             sortMissingLast="true"/>
  <fieldType name="int" class="solr.TrieIntField"
             precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="float" class="solr.TrieFloatField"
             precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="long" class="solr.TrieLongField"
             precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="double" class="solr.TrieDoubleField"
             precisionStep="0" positionIncrementGap="0"/>
  <fieldType name="tint" class="solr.TrieIntField"
             precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tfloat" class="solr.TrieFloatField"
             precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tlong" class="solr.TrieLongField"
             precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="tdouble" class="solr.TrieDoubleField"
             precisionStep="8" positionIncrementGap="0"/>
  <fieldType name="date" class="solr.TrieDateField"
             precisionStep="0" positionIncrementGap="0"/>
  <!-- catchall text field that indexes tokens both normally and in reverse for efficient
       leading wildcard queries. -->
  <field name="text_rev" type="text_general_rev" indexed="true" stored="false" multiValued="true"/>
  <!-- A Trie based date field for faster date range queries and date faceting. -->
  <fieldType name="tdate" class="solr.TrieDateField"
             precisionStep="6" positionIncrementGap="0"/>
  <!--Binary data type. The data should be sent/retrieved in as Base64
      encoded Strings -->
  <fieldtype name="binary" class="solr.BinaryField"/>
  <fieldType name="pint" class="solr.IntField"/>
  <fieldType name="plong" class="solr.LongField"/>
  <fieldType name="pfloat" class="solr.FloatField"/>
  <fieldType name="pdouble" class="solr.DoubleField"/>
  <fieldType name="pdate" class="solr.DateField"
             sortMissingLast="true"/>
  <fieldType name="random" class="solr.RandomSortField"
             indexed="true"/>
  <!-- A text field that only splits on whitespace for exact matching of
      words -->
  <fieldType name="text_ws" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
    </analyzer>
  </fieldType>
  <!-- A text type for English text where stopwords and synonyms are managed
      using the REST API -->
  <fieldType name="managed_en" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.ManagedStopFilterFactory"
              managed="english"/>
      <filter class="solr.ManagedSynonymFilterFactory"
              managed="english"/>
    </analyzer>
  </fieldType>
  <!-- A general text field that has reasonable, generic cross-language
      defaults: it tokenizes with StandardTokenizer, removes stop words from case-insensitive
      "stopwords.txt" (empty by default), and down cases. At query time only, it
      also applies synonyms. -->
  <fieldType name="text_general" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="stopwords.txt"/>
      <!-- in this example, we will only use synonyms at query time
          <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true"
          expand="false"/> -->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="stopwords.txt"/>
      <!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
          ignoreCase="true" expand="true"/> -->
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
  <!-- A text field with defaults appropriate for English: it tokenizes
      with StandardTokenizer, removes English stop words (lang/stopwords_en.txt),
      down cases, protects words from protwords.txt, and finally applies Porter's
      stemming. The query time analyzer also applies synonyms from synonyms.txt. -->
  <fieldType name="text_en" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="lang/stopwords_en.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory"
              protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!-- We are not doing search on synonyms <filter class="solr.SynonymFilterFactory"
          synonyms="synonyms.txt" ignoreCase="true" expand="true"/> -->
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="lang/stopwords_en.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.EnglishPossessiveFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory"
              protected="protwords.txt"/>
      <!-- Optionally you may want to use this less aggressive stemmer
          instead of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
  </fieldType>
  <fieldType name="text_en_splitting" class="solr.TextField"
             positionIncrementGap="100" autoGeneratePhraseQueries="true">
    <analyzer type="index">
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      <!-- in this example, we will only use synonyms at query time
          <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true"
          expand="false"/> -->
      <!-- Case insensitive stop word removal. -->
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="lang/stopwords_en.txt"/>
      <filter class="solr.WordDelimiterFilterFactory"
              generateWordParts="1" generateNumberParts="1"
              catenateWords="1" catenateNumbers="1" catenateAll="0"
              splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory"
              protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      <!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
          ignoreCase="true" expand="true"/> -->
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="lang/stopwords_en.txt"/>
      <filter class="solr.WordDelimiterFilterFactory"
              generateWordParts="1" generateNumberParts="1"
              catenateWords="0" catenateNumbers="0" catenateAll="0"
              splitOnCaseChange="1"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory"
              protected="protwords.txt"/>
      <filter class="solr.PorterStemFilterFactory"/>
    </analyzer>
  </fieldType>
  <!-- Less flexible matching, but less false matches. Probably not ideal
      for product names, but may be good for SKUs. Can insert dashes in the wrong
      place and still match. -->
  <fieldType name="text_en_splitting_tight" class="solr.TextField"
             positionIncrementGap="100" autoGeneratePhraseQueries="true">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      <!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
          ignoreCase="true" expand="false"/> -->
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="lang/stopwords_en.txt"/>
      <filter class="solr.WordDelimiterFilterFactory"
              generateWordParts="0" generateNumberParts="0"
              catenateWords="1" catenateNumbers="1" catenateAll="0"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.KeywordMarkerFilterFactory"
              protected="protwords.txt"/>
      <filter class="solr.EnglishMinimalStemFilterFactory"/>
      <!-- this filter can remove any duplicate tokens that appear
          at the same position - sometimes possible with WordDelimiterFilter in conjuncton
          with stemming. -->
      <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
    </analyzer>
  </fieldType>
  <!-- Just like text_general except it reverses the characters of each
      token, to enable more efficient leading wildcard queries. -->
  <fieldType name="text_general_rev" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer type="index">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="stopwords.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <filter class="solr.ReversedWildcardFilterFactory"
              withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2"
              maxFractionAsterisk="0.33"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <!-- <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
          ignoreCase="true" expand="true"/> -->
      <filter class="solr.StopFilterFactory" ignoreCase="true"
              words="stopwords.txt"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
  <fieldType name="alphaOnlySort" class="solr.TextField"
             sortMissingLast="true" omitNorms="true">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory"/>
      <!-- The TrimFilter removes any leading or trailing whitespace -->
      <filter class="solr.TrimFilterFactory"/>
      <filter class="solr.PatternReplaceFilterFactory"
              pattern="([^a-z])" replacement="" replace="all"/>
    </analyzer>
  </fieldType>
  <fieldtype name="phonetic" stored="false" indexed="true"
             class="solr.TextField">
    <analyzer>
      <tokenizer class="solr.StandardTokenizerFactory"/>
      <filter class="solr.DoubleMetaphoneFilterFactory"
              inject="false"/>
    </analyzer>
  </fieldtype>
  <fieldtype name="payloads" stored="false" indexed="true"
             class="solr.TextField">
    <analyzer>
      <tokenizer class="solr.WhitespaceTokenizerFactory"/>
      <filter class="solr.DelimitedPayloadTokenFilterFactory"
              encoder="float"/>
    </analyzer>
  </fieldtype>
  <!-- lowercases the entire field value, keeping it as a single token. -->
  <fieldType name="lowercase" class="solr.TextField"
             positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.KeywordTokenizerFactory"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>
  <fieldType name="descendent_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.PathHierarchyTokenizerFactory"
                 delimiter="/"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.KeywordTokenizerFactory"/>
    </analyzer>
  </fieldType>
  <fieldType name="ancestor_path" class="solr.TextField">
    <analyzer type="index">
      <tokenizer class="solr.KeywordTokenizerFactory"/>
    </analyzer>
    <analyzer type="query">
      <tokenizer class="solr.PathHierarchyTokenizerFactory"
                 delimiter="/"/>
    </analyzer>
  </fieldType>
  <fieldtype name="ignored" stored="false" indexed="false"
             multiValued="true" class="solr.StrField"/>
  <fieldType name="point" class="solr.PointType" dimension="2"
             subFieldSuffix="_d"/>
  <!-- A specialized field for geospatial search. If indexed, this fieldType
      must not be multivalued. -->
  <fieldType name="location" class="solr.LatLonType"
             subFieldSuffix="_coordinate"/>
  <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
             geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees"/>
  <fieldType name="currency" class="solr.CurrencyField"
             precisionStep="8" defaultCurrency="USD" currencyConfig="currency.xml"/>
</schema>
